        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <time.h>
        -:    5:
        -:    6:const char *all = " !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        -:    7:
        -:    8:const int maxTime = 5;
function inputChar called 44669928 returned 100% blocks executed 100%
 44669928:    9:char inputChar()
        -:   10:{
        -:   11:  // TODO: rewrite this function
 44669928:   12:  int chosen = rand() % 96;
call    0 returned 44669928
 44669928:   13:  return all[chosen];
        -:   14:}
        -:   15:
function inputString called 7444988 returned 100% blocks executed 100%
  7444988:   16:char *inputString()
        -:   17:{
        -:   18:  // TODO: rewrite this function
  7444988:   19:  char *generated = NULL;
  7444988:   20:  int length = 5;
  7444988:   21:  generated = malloc(sizeof(char) * (length + 1));
 44669928:   22:  for (int i = 0; i < length; i++)
branch  0 taken 37224940
branch  1 taken 7444988 (fallthrough)
        -:   23:  {
 37224940:   24:    generated[i] = inputChar();
call    0 returned 37224940
        -:   25:  }
  7444988:   26:  return generated;
        -:   27:}
        -:   28:
function testme called 1 returned 100% blocks executed 89%
        1:   29:void testme()
        -:   30:{
        1:   31:  int tcCount = 0;
        -:   32:  char *s;
        -:   33:  char c;
        1:   34:  int state = 0;
        1:   35:  clock_t begin = clock();
call    0 returned 1
        1:   36:  int keep = 1;
  7444990:   37:  while (keep)
branch  0 taken 7444988
branch  1 taken 1 (fallthrough)
        -:   38:  {
  7444988:   39:    clock_t end = clock();
call    0 returned 7444988
  7444988:   40:    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
  7444988:   41:    if (time_spent > maxTime)
branch  0 taken 1 (fallthrough)
branch  1 taken 7444987
        -:   42:    {
        1:   43:      keep = 0;
        -:   44:    }
  7444988:   45:    tcCount++;
  7444988:   46:    c = inputChar();
call    0 returned 7444988
  7444988:   47:    s = inputString();
call    0 returned 7444988
  7444988:   48:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 7444988
        -:   49:
  7444988:   50:    if (c == '[' && state == 0)
branch  0 taken 77307 (fallthrough)
branch  1 taken 7367681
branch  2 taken 1 (fallthrough)
branch  3 taken 77306
        1:   51:      state = 1;
  7444988:   52:    if (c == '(' && state == 1)
branch  0 taken 77499 (fallthrough)
branch  1 taken 7367489
branch  2 taken 1 (fallthrough)
branch  3 taken 77498
        1:   53:      state = 2;
  7444988:   54:    if (c == '{' && state == 2)
branch  0 taken 77634 (fallthrough)
branch  1 taken 7367354
branch  2 taken 1 (fallthrough)
branch  3 taken 77633
        1:   55:      state = 3;
  7444988:   56:    if (c == ' ' && state == 3)
branch  0 taken 77190 (fallthrough)
branch  1 taken 7367798
branch  2 taken 1 (fallthrough)
branch  3 taken 77189
        1:   57:      state = 4;
  7444988:   58:    if (c == 'a' && state == 4)
branch  0 taken 78041 (fallthrough)
branch  1 taken 7366947
branch  2 taken 1 (fallthrough)
branch  3 taken 78040
        1:   59:      state = 5;
  7444988:   60:    if (c == 'x' && state == 5)
branch  0 taken 77549 (fallthrough)
branch  1 taken 7367439
branch  2 taken 1 (fallthrough)
branch  3 taken 77548
        1:   61:      state = 6;
  7444988:   62:    if (c == '}' && state == 6)
branch  0 taken 77513 (fallthrough)
branch  1 taken 7367475
branch  2 taken 1 (fallthrough)
branch  3 taken 77512
        1:   63:      state = 7;
  7444988:   64:    if (c == ')' && state == 7)
branch  0 taken 76974 (fallthrough)
branch  1 taken 7368014
branch  2 taken 1 (fallthrough)
branch  3 taken 76973
        1:   65:      state = 8;
  7444988:   66:    if (c == ']' && state == 8)
branch  0 taken 77088 (fallthrough)
branch  1 taken 7367900
branch  2 taken 1 (fallthrough)
branch  3 taken 77087
        1:   67:      state = 9;
  7444988:   68:    if (s[0] == 'r' && s[1] == 'e' && s[2] == 's' && s[3] == 'e' && s[4] == 't' && s[5] == '\0' && state == 9)
branch  0 taken 77487 (fallthrough)
branch  1 taken 7367501
branch  2 taken 867 (fallthrough)
branch  3 taken 76620
branch  4 taken 6 (fallthrough)
branch  5 taken 861
branch  6 taken 0 (fallthrough)
branch  7 taken 6
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
        -:   69:    {
    #####:   70:      printf("error ");
call    0 never executed
    #####:   71:      exit(200);
call    0 never executed
        -:   72:    }
        -:   73:  }
        1:   74:}
        -:   75:
function main called 1 returned 100% blocks executed 100%
        1:   76:int main(int argc, char *argv[])
        -:   77:{
        1:   78:  srand(time(NULL));
call    0 returned 1
call    1 returned 1
        1:   79:  testme();
call    0 returned 1
        1:   80:  return 0;
        -:   81:}
